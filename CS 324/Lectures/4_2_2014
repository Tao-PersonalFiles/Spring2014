1. Rendering--quick review
Numerous rendering techniques:
	* Wire-frame/Hidden Line
	* Hidden Surface
		- z-buffer(polygon)
		- Scan line()
		- Ray tracing
	* Shadows
	* Texturing

2 Lighting
For realistic image, we must understand a bit about lighting. Specifically, how various shading models work.
  An object that is illuminated reflects defferent amounts of light depending on its surface properties, i.e., flat or glossy, metallic, etc.

2.1 Shading
	* Flat
	* Smooth
		- Gouraud
		- Phong
	Faces toward the light source appear brighter than those facing away from the light.

2.1.1 Flat shading
A calculation of how much light is scattered from a single point on a face is made to specify the appearance of the face. This method is simple, but not very realistic
  Flat shading shows the underlying polygon in many cases.

2.1.2 Smooth Shading
Couraud shading uses an interpolation scheme to calculate how much light is scattered from a face of an object. The variation in levels is much smoother that Flat shading and the edges of polygons disappear--making the surface appear smooth, rather than faceted

2.1.3 Specular Lighting
Highlights can be added to make objects look shiny. This is accompilshed by adding specular light components. Objects that are shinier appear to be made of plastic.

2.2 Shadows
Generally very complicated. Fairly easy in OpenGL

2.3 Textures
Later(maybe).

2.4 Shading Models
Light models can be very complicated and are usually very computationally intensive.
 A shading model specifies how much light is scattered or relected (or transmitted) from a surface. Examine some simple shading models, focusing on achromatic light, which has brightness, but no color.chromatic light is only a shade of gray and is described by a single value.
  Shading models used in graphics frequently are dependent upon two types of light sources that illuminate objects: point light sources and ambient light.
   * some is absorbed by the surface.
   * Some is reflected from the surface.
   * Some is transmitted into the surface.

2.4.1 Reflection
Diffuse Scattering
  Occurs when some of the incident light penetrates the surface and is reflected uniformly in all directions. The scattered light interacts strongly with the surface, so its color is affected by the material of the surface.

  Specular Reflections
    Are more mirror-like and are highly directional--incident light does not penetrate the object, but directly reflected from its outer surface.

2.4.2 Geometry of Reflected light
To compute the diffuse and specular components of light, we need to find three vectors. The three principal vectors required to find the amount of light that reaches the eye from a point P.
	1. The normal vector n to the surface P.
	2. The vector v from P to the viewer's eye.
	3. The vector s from P to the light source
The angles between the vectors form the basis for computing light intensities and are normally calculated using world coordinates.

	
2.4.3 Diffuse light component
Lambert's law
	Id = Is Pd s*n / |s|*|n|
Is is the intensity of the light source
Id is the intensity of the diffused light
Pd is the diffuse reflection coefficient

	if the face is aimed away from the eye, the dot product is negative, so Id is set to zero.
	Id = Is Pd max(0, s*n/|s|*|n|)


2.4.4 SPecular Reflection
		I_sp = I_s p_s (r*v/|r|*|v|)^f
	p_s is the specular reflection coefficient,
	r is the reflection, and 
	f is the power law coefficient
	  If can be expensive to compute the specular term, since 
	it requires finding the vector r and normalizing it.


2.4.5 Ambient light
Ambient light -- uniform background glow. The ambient light source is not situated at any particular place,
and it spreads in all directions uniformly. The source is assigned an intensity I_a. 
Each face in the model is assigned a value for its ambient reflection coefficient p_a

2.4.6 Combining Light Contributinos
The sun of the three light contributions -- ambient, diffuse and specular -- form the total amount of light I that reaches the eye from point P
	I = I_a*p_a + I_d*p_d X lambert+ I_sp*p_s X phong^f
		lambert = max(0, s*n/|s|*|n|)
		phong = max(0,h*n/|h|*|n|)

2.4.7 Color
(公式怎么那么累，笔记本)
Light sources have three "type" of color:
1. ambient (I_ar, I_ag, I_ab)
2. diffuse (I_dr, I_dg, I_db) 
3. specular(I_spr, I_spg, I_spb)
The requres nine refections coefficients
	ambient:	p_ar, p_ag, p_ab
	diffuse     p_dr ...
	specular:	p_sr ...

	The ambient and diffuse reflection coefficients are based on the color of the surface

2.4.9 Shading and the Graphics pipeline
	When is shading performed?
	How is it done?

	The vertices of a mesh are sent down the pipeline along with their associated ormals, and all shading calculations are done on the vertices
	(diagram on note book)

2.5 Light Sources in OpenGL
OpenGL allows you to define up to eight sources which are referred to by the names GL_LIGHT0, GL_LIGHT1, etc.

GLfloat lightPosition[] = {3.0, 6.0, 5.0, 1.0};

glLightfv( GL_LIGHT0, GL_POSITION, lightPosition );

glEnable( GL_LIGHTING );		// ** enable light**
glEnable( GL_LGITH0 );			// ** enabel source**

2.5.1 Light Source Position
A light source may be "in the scene" or remote (at some infinite position). This is controlled by the last parameter, for example:
	local:	(x,y,z,1)
	remote: (x,y,z,0)

2.5.2 Specifying Light Propertices
GLfloat amb()[] = {0.2, 0.4, 0.6, 1.0};
GLfloat diff()[] = {0.2, 0.4, 0.6, 1.0};
GLfloat spec()[]= {0.2, 0.4, 0.6, 1.0};

glLightfv(GL_LIGHT0, GL_AMBIENT, amb());
glLightfv(GL_LIGHT0, GL_DIFFUSE, diff());
glLightfv(GL_LIGHT0, GL_SPECULAR, spec());


2.5.3 Default Light Propertices
The default light properties in OpenGL are defined as:
Ambient (0,0,0,1) dimmest possible -black				
Diffuse (1,1,1,1) brightest possible - white
Specular(1,1,1,1) brightest possible - white
Note these are local 

